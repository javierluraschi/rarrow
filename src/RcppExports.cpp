// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "arrow_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// array
array_ptr array(IntegerVector input);
RcppExport SEXP _arrow_array(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(array(input));
    return rcpp_result_gen;
END_RCPP
}
// array_string
CharacterVector array_string(array_ptr const& array);
RcppExport SEXP _arrow_array_string(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< array_ptr const& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(array_string(array));
    return rcpp_result_gen;
END_RCPP
}
// as_r_int
IntegerVector as_r_int(array_ptr const& array);
RcppExport SEXP _arrow_as_r_int(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< array_ptr const& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(as_r_int(array));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_arrow_array", (DL_FUNC) &_arrow_array, 1},
    {"_arrow_array_string", (DL_FUNC) &_arrow_array_string, 1},
    {"_arrow_as_r_int", (DL_FUNC) &_arrow_as_r_int, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_arrow(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
